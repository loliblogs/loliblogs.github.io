{"version":3,"file":"DecryptClient.tpN-FYDx.js","sources":["../../src/components/DecryptClient.tsx"],"sourcesContent":["/**\n * 客户端解密组件\n * 只包含逻辑，不渲染 UI（UI 由 PostPage 条件编译）\n * 重构要点：纯函数外置 + useRef 管理 worker 状态\n */\n\nimport { useEffect, useRef } from 'react';\nimport argon2Worker from '@/utils/argon2-worker?worker';\n\nimport type { EncryptedPayload, Argon2WorkerMessage, Argon2WorkerResponse } from '@/types/encryption';\n\n// === 纯工具函数 ===\n\nfunction base64ToUint8(b64: string): Uint8Array {\n  return Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n}\n\nfunction shakeElement(el: HTMLElement): void {\n  el.classList.remove('animate-[shake_0.35s_ease-in-out]');\n  void el.offsetHeight; // 强制 reflow\n  el.classList.add('animate-[shake_0.35s_ease-in-out]');\n}\n\n// === 解密相关纯函数 ===\n\nasync function decryptBlock(\n  key: CryptoKey,\n  payload: EncryptedPayload,\n): Promise<string> {\n  const nonce = base64ToUint8(payload.n);\n  const ciphertext = base64ToUint8(payload.c);\n\n  // AES-GCM 解密（自动验证完整性）\n  const decrypted = await crypto.subtle.decrypt(\n    { name: 'AES-GCM', iv: new Uint8Array(nonce) },\n    key,\n    new Uint8Array(ciphertext),\n  );\n\n  return new TextDecoder().decode(decrypted);\n}\n\nfunction applyContentToDOM(html: string, target: HTMLElement): void {\n  const range = document.createRange();\n  range.selectNode(target);\n  const fragment = range.createContextualFragment(html);\n  target.replaceChildren(fragment);\n  target.classList.remove('hidden');\n  target.classList.add('animate-[fade-in_0.6s_ease-out]');\n}\n\nfunction applyTocToDOM(html: string, tocWrapper: HTMLElement): void {\n  document.querySelector('[data-toc-placeholder]')?.remove();\n\n  const range = document.createRange();\n  range.selectNode(tocWrapper);\n  const fragment = range.createContextualFragment(html);\n  tocWrapper.replaceWith(fragment);\n\n  document.getElementById('toc')?.classList.add('animate-[fade-in_0.6s_ease-out]');\n}\n\n// === React 组件 ===\n\nexport default function DecryptClient() {\n  const workerRef = useRef<Worker | null>(null);\n\n  useEffect(() => {\n    // 查询 DOM 元素\n    const markdownBody = document.querySelector<HTMLElement>('[data-markdown]');\n    const tocWrapper = document.querySelector<HTMLElement>('[data-toc-encrypted]');\n    const contentData = markdownBody?.textContent.trim() ?? null;\n    const tocData = tocWrapper?.textContent.trim() ?? null;\n\n    // 没有加密内容就退出\n    if (!contentData && !tocData) return;\n\n    const button = document.getElementById('decrypt-button') as HTMLButtonElement | null;\n    const input = document.getElementById('decrypt-password') as HTMLInputElement | null;\n    const inputGroup = document.getElementById('input-group');\n    const errorRegion = document.getElementById('decrypt-error');\n    const errorText = document.getElementById('error-text');\n\n    let isDecrypting = false;\n\n    // Argon2 密钥派生（访问 workerRef）\n    const deriveKey = async (password: string, salt: Uint8Array): Promise<CryptoKey> => {\n      workerRef.current ??= new argon2Worker();\n\n      workerRef.current.postMessage({\n        type: 'DERIVE_KEY',\n        password,\n        salt,\n      } satisfies Argon2WorkerMessage);\n\n      const hash = await new Promise<Uint8Array>((resolve, reject) => {\n        if (!workerRef.current) {\n          reject(new Error('Worker not initialized'));\n          return;\n        }\n\n        workerRef.current.onmessage = (e: MessageEvent<Argon2WorkerResponse>) => {\n          if (e.data.type === 'KEY_DERIVED') {\n            resolve(e.data.key);\n          } else {\n            reject(new Error(e.data.error));\n          }\n        };\n\n        workerRef.current.onerror = (e: ErrorEvent) => {\n          workerRef.current?.terminate();\n          workerRef.current = null;\n          reject(new Error(e.message, { cause: e.error }));\n        };\n      });\n\n      return crypto.subtle.importKey('raw', new Uint8Array(hash), 'AES-GCM', false, ['decrypt']);\n    };\n\n    // 完整解密流程\n    const performDecryption = async (password: string): Promise<void> => {\n      const contentPayload = contentData ? JSON.parse(contentData) as EncryptedPayload : null;\n      const tocPayload = tocData ? JSON.parse(tocData) as EncryptedPayload : null;\n\n      const firstPayload = contentPayload ?? tocPayload;\n      if (!firstPayload) return;\n\n      const salt = base64ToUint8(firstPayload.s);\n      const key = await deriveKey(password, salt);\n\n      if (contentPayload && markdownBody) {\n        const html = await decryptBlock(key, contentPayload);\n        applyContentToDOM(html, markdownBody);\n      }\n\n      if (tocPayload && tocWrapper) {\n        const html = await decryptBlock(key, tocPayload);\n        applyTocToDOM(html, tocWrapper);\n      }\n\n      window.dispatchEvent(new CustomEvent('content-decrypted'));\n    };\n\n    // UI 辅助函数\n    const setBusy = (busy: boolean) => {\n      const method = busy ? 'setAttribute' : 'removeAttribute';\n      button?.[method]('aria-busy', 'true');\n      input?.[method]('aria-busy', 'true');\n    };\n\n    const showError = (message: string) => {\n      input?.setAttribute('aria-invalid', 'true');\n      if (errorRegion && errorText) {\n        errorText.textContent = message;\n        errorRegion.classList.remove('hidden');\n      }\n    };\n\n    const clearError = () => {\n      input?.setAttribute('aria-invalid', 'false');\n      errorRegion?.classList.add('hidden');\n      if (errorText) errorText.textContent = '';\n    };\n\n    // 事件处理\n    const handleDecrypt = () => {\n      if (isDecrypting) return;\n\n      const password = input?.value.trim();\n      if (!password) {\n        if (inputGroup) shakeElement(inputGroup);\n        showError(input?.placeholder ?? '请输入密码');\n        input?.focus();\n        return;\n      }\n\n      isDecrypting = true;\n      clearError();\n\n      const buttonText = document.getElementById('button-text');\n      const buttonLoading = document.getElementById('button-loading');\n\n      button?.setAttribute('disabled', 'true');\n      setBusy(true);\n      buttonText?.classList.add('opacity-0');\n      buttonLoading?.classList.remove('hidden');\n      buttonLoading?.classList.add('flex');\n\n      void performDecryption(password)\n        .then(() => {\n          workerRef.current?.terminate();\n          workerRef.current = null;\n\n          const panel = document.getElementById('decrypt-panel');\n          panel?.classList.add('animate-[fade-out-up_0.5s_ease-out_forwards]');\n          panel?.addEventListener('animationend', () => {\n            panel.remove();\n          }, { once: true });\n        })\n        .catch((err: unknown) => {\n          console.error('解密失败:', err);\n\n          button?.removeAttribute('disabled');\n          setBusy(false);\n          buttonText?.classList.remove('opacity-0');\n          buttonLoading?.classList.add('hidden');\n          buttonLoading?.classList.remove('flex');\n\n          if (inputGroup) shakeElement(inputGroup);\n          showError('密码错误或内容损坏，请重试');\n          input?.focus();\n          input?.select();\n        })\n        .finally(() => {\n          isDecrypting = false;\n        });\n    };\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter') handleDecrypt();\n    };\n\n    button?.addEventListener('click', handleDecrypt);\n    input?.addEventListener('keydown', handleKeydown);\n    input?.focus();\n\n    return () => {\n      button?.removeEventListener('click', handleDecrypt);\n      input?.removeEventListener('keydown', handleKeydown);\n      workerRef.current?.terminate();\n    };\n  }, []);\n\n  return null;\n}\n"],"names":["base64ToUint8","b64","Uint8Array","from","atob","c","charCodeAt","shakeElement","el","classList","remove","offsetHeight","add","async","decryptBlock","key","payload","nonce","n","ciphertext","decrypted","crypto","subtle","decrypt","name","iv","TextDecoder","decode","DecryptClient","workerRef","useRef","useEffect","markdownBody","document","querySelector","tocWrapper","contentData","textContent","trim","tocData","button","getElementById","input","inputGroup","errorRegion","errorText","isDecrypting","performDecryption","password","contentPayload","JSON","parse","tocPayload","firstPayload","salt","s","current","argon2Worker","postMessage","type","hash","Promise","resolve","reject","onmessage","e","data","Error","error","onerror","terminate","message","cause","importKey","deriveKey","html","target","range","createRange","selectNode","fragment","createContextualFragment","replaceChildren","applyContentToDOM","replaceWith","applyTocToDOM","window","dispatchEvent","CustomEvent","setBusy","busy","method","showError","setAttribute","handleDecrypt","value","placeholder","focus","buttonText","buttonLoading","then","panel","addEventListener","once","catch","err","console","removeAttribute","select","finally","handleKeydown","removeEventListener"],"mappings":"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"}