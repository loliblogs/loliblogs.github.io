{"version":3,"file":"DecryptClient.Db7UxM7y.js","sources":["../../src/components/DecryptClient.tsx"],"sourcesContent":["/**\n * 客户端解密组件\n * 重构目标：拆分 165 行 useEffect → 职责清晰的多个函数\n */\n\nimport { useEffect, useRef } from 'react';\nimport argon2Worker from '@/utils/argon2-worker?worker';\n\nimport type { EncryptedPayload, Argon2WorkerMessage, Argon2WorkerResponse } from '@/types/encryption';\n\n// === 类型定义 ===\n\n/**\n * 解密所需的 DOM 元素引用\n */\ninterface DecryptElements {\n  // 加密内容元素\n  markdownBody: HTMLElement | null;\n  tocWrapper: HTMLElement | null;\n  contentData: string | null;\n  tocData: string | null;\n\n  // UI 控制元素\n  button: HTMLButtonElement;\n  input: HTMLInputElement;\n  inputGroup: HTMLElement;\n  buttonText: HTMLElement;\n  buttonLoading: HTMLElement;\n  errorRegion: HTMLElement;\n  errorText: HTMLElement;\n  decryptPanel: HTMLElement;\n}\n\n/**\n * 解密 UI 状态\n */\ntype DecryptUIState = 'idle' | 'busy' | 'error';\n\n// === 纯工具函数 ===\n\nfunction base64ToUint8(b64: string): Uint8Array {\n  return Uint8Array.from(atob(b64), c => c.charCodeAt(0));\n}\n\nfunction shakeElement(el: HTMLElement): void {\n  el.classList.remove('animate-[shake_0.35s_ease-in-out]');\n  void el.offsetHeight; // 强制 reflow\n  el.classList.add('animate-[shake_0.35s_ease-in-out]');\n}\n\n// === 解密相关纯函数 ===\n\nasync function decryptBlock(\n  key: CryptoKey,\n  payload: EncryptedPayload,\n): Promise<string> {\n  const nonce = base64ToUint8(payload.n);\n  const ciphertext = base64ToUint8(payload.c);\n\n  // AES-GCM 解密（自动验证完整性）\n  const decrypted = await crypto.subtle.decrypt(\n    { name: 'AES-GCM', iv: new Uint8Array(nonce) },\n    key,\n    new Uint8Array(ciphertext),\n  );\n\n  return new TextDecoder().decode(decrypted);\n}\n\nfunction applyContentToDOM(html: string, target: HTMLElement): void {\n  const range = document.createRange();\n  range.selectNode(target);\n  const fragment = range.createContextualFragment(html);\n  target.replaceChildren(fragment);\n  target.classList.remove('hidden');\n  target.classList.add('animate-[fade-in_0.6s_ease-out]');\n}\n\nfunction applyTocToDOM(html: string, tocWrapper: HTMLElement): void {\n  document.querySelector('[data-toc-placeholder]')?.remove();\n\n  const range = document.createRange();\n  range.selectNode(tocWrapper);\n  const fragment = range.createContextualFragment(html);\n  tocWrapper.replaceWith(fragment);\n\n  document.getElementById('toc')?.classList.add('animate-[fade-in_0.6s_ease-out]');\n}\n\n// === DOM 查询层 ===\n\n/**\n * 查询解密所需的所有 DOM 元素\n * @returns DecryptElements 或 null（如果没有加密内容或缺少必需元素）\n */\nfunction queryDecryptElements(): DecryptElements | null {\n  // 1. 查询加密内容\n  const markdownBody = document.querySelector<HTMLElement>('[data-markdown]');\n  const tocWrapper = document.querySelector<HTMLElement>('[data-toc-encrypted]');\n  const contentData = markdownBody?.textContent.trim() ?? null;\n  const tocData = tocWrapper?.textContent.trim() ?? null;\n\n  // 早期退出：没有加密内容\n  if (!contentData && !tocData) return null;\n\n  // 2. 查询 UI 控制元素\n  const button = document.getElementById('decrypt-button') as HTMLButtonElement | null;\n  const input = document.getElementById('decrypt-password') as HTMLInputElement | null;\n  const inputGroup = document.getElementById('input-group');\n  const buttonText = document.getElementById('button-text');\n  const buttonLoading = document.getElementById('button-loading');\n  const errorRegion = document.getElementById('decrypt-error');\n  const errorText = document.getElementById('error-text');\n  const decryptPanel = document.getElementById('decrypt-panel');\n\n  // 3. 验证必需元素存在\n  if (!button || !input || !inputGroup || !buttonText || !buttonLoading\n    || !errorRegion || !errorText || !decryptPanel) {\n    console.error('DecryptClient: 缺少必需的 DOM 元素');\n    return null;\n  }\n\n  return {\n    markdownBody,\n    tocWrapper,\n    contentData,\n    tocData,\n    button,\n    input,\n    inputGroup,\n    buttonText,\n    buttonLoading,\n    errorRegion,\n    errorText,\n    decryptPanel,\n  };\n}\n\n// === UI 状态管理层 ===\n\n/**\n * 统一管理解密 UI 的所有状态变化\n * 替代原有的 setBusy、showError、clearError 三个函数\n *\n * 状态本质：\n * - busy: 禁用交互\n * - error/idle: 可交互，但错误提示不同\n */\nfunction setDecryptUIState(\n  dom: DecryptElements,\n  state: DecryptUIState,\n  errorMsg?: string,\n): void {\n  const { button, input, buttonText, buttonLoading, errorRegion, errorText, inputGroup } = dom;\n\n  if (state === 'busy') {\n    // 忙碌状态：禁用所有交互\n    button.disabled = true;\n    button.setAttribute('aria-busy', 'true');\n    input.setAttribute('aria-busy', 'true');\n    buttonText.classList.add('opacity-0');\n    buttonLoading.classList.remove('hidden');\n    buttonLoading.classList.add('flex');\n    errorRegion.classList.add('hidden');\n  } else {\n    // 非忙碌状态：恢复交互能力（error 和 idle 的共同部分）\n    button.disabled = false;\n    button.removeAttribute('aria-busy');\n    input.removeAttribute('aria-busy');\n    buttonText.classList.remove('opacity-0');\n    buttonLoading.classList.add('hidden');\n    buttonLoading.classList.remove('flex');\n\n    // 根据具体状态设置错误提示\n    if (state === 'error') {\n      input.setAttribute('aria-invalid', 'true');\n      errorRegion.classList.remove('hidden');\n      if (errorMsg) errorText.textContent = errorMsg;\n      shakeElement(inputGroup);\n    } else {\n      // idle: 清除错误状态\n      input.setAttribute('aria-invalid', 'false');\n      errorRegion.classList.add('hidden');\n      errorText.textContent = '';\n    }\n  }\n}\n\n// === 密钥派生层 ===\n\n/**\n * 使用 Argon2 从密码派生 AES-GCM 密钥\n */\nasync function deriveKeyFromPassword(\n  workerRef: React.RefObject<Worker | null>,\n  password: string,\n  salt: Uint8Array,\n): Promise<CryptoKey> {\n  // 初始化 Worker（如果还没有）\n  workerRef.current ??= new argon2Worker();\n\n  // 发送密钥派生请求\n  workerRef.current.postMessage({\n    type: 'DERIVE_KEY',\n    password,\n    salt,\n  } satisfies Argon2WorkerMessage);\n\n  // 等待 Worker 响应\n  const hash = await new Promise<Uint8Array>((resolve, reject) => {\n    if (!workerRef.current) {\n      reject(new Error('Worker not initialized'));\n      return;\n    }\n\n    workerRef.current.onmessage = (e: MessageEvent<Argon2WorkerResponse>) => {\n      if (e.data.type === 'KEY_DERIVED') {\n        resolve(e.data.key);\n      } else {\n        reject(new Error(e.data.error));\n      }\n    };\n\n    workerRef.current.onerror = (e: ErrorEvent) => {\n      workerRef.current?.terminate();\n      workerRef.current = null;\n      reject(new Error(e.message, { cause: e.error }));\n    };\n  });\n\n  // 导入为 CryptoKey\n  return crypto.subtle.importKey('raw', new Uint8Array(hash), 'AES-GCM', false, ['decrypt']);\n}\n\n// === 解密执行层 ===\n\n/**\n * 执行完整的解密流程\n * 注意：保持 content 和 toc 分开处理（它们的 DOM 操作不同）\n */\nasync function executeDecryption(\n  dom: DecryptElements,\n  password: string,\n  workerRef: React.RefObject<Worker | null>,\n): Promise<void> {\n  const { contentData, tocData, markdownBody, tocWrapper } = dom;\n\n  // 解析加密载荷\n  const contentPayload = contentData ? JSON.parse(contentData) as EncryptedPayload : null;\n  const tocPayload = tocData ? JSON.parse(tocData) as EncryptedPayload : null;\n\n  const firstPayload = contentPayload ?? tocPayload;\n  if (!firstPayload) return;\n\n  // 派生密钥\n  const salt = base64ToUint8(firstPayload.s);\n  const key = await deriveKeyFromPassword(workerRef, password, salt);\n\n  // 解密 content（保持原有逻辑，不抽象）\n  if (contentPayload && markdownBody) {\n    const html = await decryptBlock(key, contentPayload);\n    applyContentToDOM(html, markdownBody);\n  }\n\n  // 解密 toc（保持原有逻辑，不抽象）\n  if (tocPayload && tocWrapper) {\n    const html = await decryptBlock(key, tocPayload);\n    applyTocToDOM(html, tocWrapper);\n  }\n\n  // 触发解密完成事件\n  window.dispatchEvent(new CustomEvent('content-decrypted'));\n}\n\n// === 成功/错误处理层 ===\n\n/**\n * 解密成功：淡出并移除解密面板\n */\nasync function handleDecryptSuccess(dom: DecryptElements, workerRef: React.RefObject<Worker | null>): Promise<void> {\n  const { decryptPanel } = dom;\n\n  decryptPanel.classList.add('animate-[fade-out-up_0.5s_ease-out_forwards]');\n\n  workerRef.current?.terminate();\n  workerRef.current = null;\n\n  await new Promise<void>((resolve) => {\n    decryptPanel.addEventListener('animationend', () => {\n      decryptPanel.remove();\n      resolve();\n    }, { once: true });\n  });\n}\n\n/**\n * 解密失败：显示错误提示\n */\nfunction handleDecryptError(dom: DecryptElements, error: unknown): void {\n  console.error('解密失败:', error);\n\n  setDecryptUIState(dom, 'error', '密码错误或内容损坏，请重试');\n  dom.input.focus();\n  dom.input.select();\n}\n\n/**\n * 空密码：显示提示并聚焦输入框\n */\nfunction handleEmptyPassword(dom: DecryptElements): void {\n  setDecryptUIState(dom, 'error', dom.input.placeholder || '请输入密码');\n  dom.input.focus();\n}\n\n// === 解密处理器工厂 ===\n\n/**\n * 创建解密按钮的点击处理器\n * 封装了防重复提交逻辑和完整的解密流程\n */\nfunction createDecryptHandler(\n  dom: DecryptElements,\n  workerRef: React.RefObject<Worker | null>,\n) {\n  let isDecrypting = false;\n\n  return () => {\n    // 防止重复提交\n    if (isDecrypting) return;\n\n    // 验证密码\n    const password = dom.input.value.trim();\n    if (!password) {\n      handleEmptyPassword(dom);\n      return;\n    }\n\n    // 开始解密流程\n    isDecrypting = true;\n    setDecryptUIState(dom, 'busy');\n\n    executeDecryption(dom, password, workerRef)\n      .then(() => handleDecryptSuccess(dom, workerRef))\n      .catch((err: unknown) => { handleDecryptError(dom, err); })\n      .finally(() => {\n        isDecrypting = false;\n      });\n  };\n}\n\n// === React 组件 ===\n\nexport default function DecryptClient() {\n  const workerRef = useRef<Worker | null>(null);\n\n  useEffect(() => {\n    // 1. 查询 DOM 元素\n    const dom = queryDecryptElements();\n    if (!dom) return;\n\n    // 2. 创建解密处理器\n    const handleDecrypt = createDecryptHandler(dom, workerRef);\n\n    // 3. 创建键盘处理器\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter') handleDecrypt();\n    };\n\n    // 4. 绑定事件\n    dom.button.addEventListener('click', handleDecrypt);\n    dom.input.addEventListener('keydown', handleKeydown);\n    dom.input.focus();\n\n    // 5. 清理函数\n    return () => {\n      dom.button.removeEventListener('click', handleDecrypt);\n      dom.input.removeEventListener('keydown', handleKeydown);\n      workerRef.current?.terminate();\n    };\n  }, []);\n\n  return null;\n}\n"],"names":["base64ToUint8","b64","Uint8Array","from","atob","c","charCodeAt","async","decryptBlock","key","payload","nonce","n","ciphertext","decrypted","crypto","subtle","decrypt","name","iv","TextDecoder","decode","setDecryptUIState","dom","state","errorMsg","button","input","buttonText","buttonLoading","errorRegion","errorText","inputGroup","el","disabled","setAttribute","classList","add","remove","removeAttribute","textContent","offsetHeight","executeDecryption","password","workerRef","contentData","tocData","markdownBody","tocWrapper","contentPayload","JSON","parse","tocPayload","firstPayload","salt","s","current","argon2Worker","postMessage","type","hash","Promise","resolve","reject","onmessage","e","data","Error","error","onerror","terminate","message","cause","importKey","deriveKeyFromPassword","html","target","range","document","createRange","selectNode","fragment","createContextualFragment","replaceChildren","applyContentToDOM","querySelector","replaceWith","getElementById","applyTocToDOM","window","dispatchEvent","CustomEvent","createDecryptHandler","isDecrypting","value","trim","then","decryptPanel","addEventListener","once","handleDecryptSuccess","catch","err","console","focus","select","handleDecryptError","finally","placeholder","handleEmptyPassword","DecryptClient","useRef","useEffect","queryDecryptElements","handleDecrypt","handleKeydown","removeEventListener"],"mappings":"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"}